<?php
/**
 * WC_Install_For_Testing class file.
 *
 * @package WooCommerce\Tests\Helpers
 */

/**
 * Mock WC_Install class to be used in tests.
 */
class WC_Install_For_Testing extends WC_Install {

	/**
	 * @var string The schema supplied to set_schema.
	 */
	private static $schema;

	/**
	 * @var string The HTML generated by a call to notice_db_schema_not_updated.
	 */
	public static $error_notice_html = null;

	/**
	 * @var wpdb The instance of wpdb to use instead of the global one.
	 */
	public static $wpdb_instance = null;

	/**
	 * @var array The scheduled callbacks.
	 */
	public static $scheduled_callbacks = array();

	/**
	 * Set the schema creation SQL query that will be returned by get_schema.
	 *
	 * @param string $schema String with "CREATE/ALTER TABLE" SQL statements, separated with ';'.
	 */
	public static function set_schema( $schema ) {
		self::$schema = $schema;
	}

	/**
	 * Set the update callbacks that will be returned by get_db_update_callbacks.
	 *
	 * @param array $callbacks An associative array where keys are version numbers an values are arrays with update function names.
	 */
	public static function set_update_callbacks( $callbacks ) {
		self::$db_updates = $callbacks;
	}

	/**
	 * Get Table schema.
	 *
	 * @return string
	 */
	protected static function get_schema() {
		return self::$schema;
	}

	/**
	 * Get list of DB update callbacks.
	 *
	 * @return array
	 */
	public static function get_db_update_callbacks() {
		return self::$db_updates;
	}

	/**
	 * Store the HTML for the database error notice, instead of actually showing it.
	 *
	 * @param string $table_name Table name that couldn't be created.
	 * @param string $error Database error message.
	 */
	protected static function notice_db_schema_not_updated( $table_name, $error ) {
		self::$error_notice_html = self::db_schema_not_updated_html( $table_name, 'Something went wrong in the database' );
	}

	/**
	 * Returns the instance of wpdb to use for database queries.
	 *
	 * @return wpdb Instance of wpdb.
	 */
	protected static function wpdb() {
		global $wpdb;

		return self::$wpdb_instance ?? $wpdb;
	}

	/**
	 * Stores the supplied callback instead of scheduling it.
	 *
	 * @param int      $time Callback execution time (unused).
	 * @param callable $callback The callback to store.
	 */
	protected static function schedule_update_callback( $time, $callback ) {
		self::$scheduled_callbacks[] = $callback;
	}
}
